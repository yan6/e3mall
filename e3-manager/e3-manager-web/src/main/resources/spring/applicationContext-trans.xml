<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- 开启事务 -->
	<!-- 平台事务管路器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为(就是保存，修改，删除，更新有事务， 查找没事务) -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />			
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 切面 配置AOP(把切面类植入目标对象类的配置) -->
	<aop:config>
		<!-- 配置切面类:切入点，前置通知 -->
		<!-- <aop:aspect ref="txAdvice"> -->
		<!-- save方法之前，执行增强log方法 pointcut切入点: execution(public void com.ywj.demo1.CustomerDaoImpl.save()) 
			切入点的表达式： 1.execution()，固定 2.public 可以不写 3.void int String * 找到指定返回值类型的方法 
			*表示任意返回值类型，不能不写 4.com.ywj.demo1，包名 如果要涉及所有包*..* 代替一层com.ywj.* ,不能不写 5.CustomerDaoImpl类名 
			*DaoImpl，可以这样写 6.save()方法 save*() *save() 7.方法的参数 save(*)：一个参数的方法 save(..):任意个参数 -->
		<!-- <aop:before method="log" pointcut="execution(public void com.ywj.demo1.CustomerDaoImpl.save())"/> -->



		<!-- 最终通知(在save方法执行之后) 当出现异常时，最终通知还会执行 -->
		<!-- <aop:after method="atter" pointcut="execution(public void com.ywj.demo1.CustomerDaoImpl.save())"/> -->
		<!-- 后置通知(在save方法执行之后) 当出现异常时，后置通知不会执行 -->
		<!-- <aop:after-returning method="atterReturn" pointcut="execution(public 
			void com.ywj.demo1.CustomerDaoImpl.save())"/> -->
		<!-- 环绕通知(目标方法之前通知，之后也通知，但是目标代码不会执行,配置之后也通知) -->
		<!-- <aop:around method="around" pointcut="execution(* com.ywj.service.*.*(..))" 
			/> -->
		<!-- </aop:aspect> -->
		
		<!-- 配置声明式事务 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut="execution(* cn.e3mall.service..*.*(..))" />
			
	</aop:config>
</beans>
